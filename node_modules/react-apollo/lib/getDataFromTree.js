var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { renderToStaticMarkup } from 'react-dom/server';
var Trie = (function () {
    function Trie() {
        this.children = null;
        this.added = false;
    }
    Trie.prototype.has = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        var node = this;
        return keys.every(function (key) {
            var child = node.children && node.children.get(key);
            return !!(child && (node = child));
        }) && node.added;
    };
    Trie.prototype.add = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        var node = this;
        keys.forEach(function (key) {
            var map = node.children || (node.children = new Map);
            var child = map.get(key);
            if (child) {
                node = child;
            }
            else {
                map.set(key, node = new Trie());
            }
        });
        node.added = true;
    };
    return Trie;
}());
var RenderPromises = (function () {
    function RenderPromises() {
        this.queryPromises = new Map();
        this.queryGraveyard = new Trie();
    }
    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {
        var _a = queryInstance.props, query = _a.query, variables = _a.variables;
        if (!this.queryGraveyard.has(query, JSON.stringify(variables))) {
            this.queryPromises.set(queryInstance, new Promise(function (resolve) {
                resolve(queryInstance.fetchData());
            }));
            return null;
        }
        return finish();
    };
    RenderPromises.prototype.hasPromises = function () {
        return this.queryPromises.size > 0;
    };
    RenderPromises.prototype.consumeAndAwaitPromises = function () {
        var _this = this;
        var promises = [];
        this.queryPromises.forEach(function (promise, queryInstance) {
            var _a = queryInstance.props, query = _a.query, variables = _a.variables;
            _this.queryGraveyard.add(query, JSON.stringify(variables));
            promises.push(promise);
        });
        this.queryPromises.clear();
        return Promise.all(promises);
    };
    return RenderPromises;
}());
export { RenderPromises };
var RenderPromisesProvider = (function (_super) {
    __extends(RenderPromisesProvider, _super);
    function RenderPromisesProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RenderPromisesProvider.prototype.getChildContext = function () {
        return {
            renderPromises: this.props.renderPromises,
        };
    };
    RenderPromisesProvider.prototype.render = function () {
        return this.props.children;
    };
    RenderPromisesProvider.childContextTypes = {
        renderPromises: PropTypes.object,
    };
    return RenderPromisesProvider;
}(React.Component));
export default function getDataFromTree(rootElement, renderFunction) {
    if (renderFunction === void 0) { renderFunction = renderToStaticMarkup; }
    var renderPromises = new RenderPromises();
    function process() {
        var html = renderFunction(React.createElement(RenderPromisesProvider, {
            renderPromises: renderPromises,
            children: rootElement,
        }));
        return renderPromises.hasPromises()
            ? renderPromises.consumeAndAwaitPromises().then(process)
            : html;
    }
    return Promise.resolve().then(process);
}
//# sourceMappingURL=getDataFromTree.js.map